Tipos Numéricos - int, float e complex

int

	Para representação de todos números inteiros é o tipo int.
	A princípio utilizamos para números inteiros o tipo int. O número máximo de int que é aceito pode variar de uma máquina para outra.
	Para sabermos qual é o número máximo do tipo int fazemos:


Objeto inteiro:

> i = int(7)

ou

> i = 7



Verificando seu valor;

> i

7



Verificando seu tipo:

> type(i)

int

type(bar)
long



Representação hexadecimal de 178:

> 0xb2

178



Representação octal de 8:

> 0o10

8



Representação binária de 14:

> 0b1110

14



Número 7 (sete) convertido para as bases binária, octal e hexadecimal:

> bin(7)  # binário

'0b111'

> oct(7)

'0o7'

> hex(7)

'0x7'





Ponto flutuante - float

	Não tem precisão absoluta, sua precisão é relativa.
	Para uma maior precisão com números que tenham ponto flutuante, utilizar o módulo decimal.



Criação de um float:

> f = float(3)

ou

f = 3.0

f
3.0

x = 0.5000000000

x
0.5

x = .5

x
0.5

type(x)
float

x = 2.

x
2.0
 
type(7 + 3.0)
float

7 + 3.0
10.0


Divisão

Python 2

3 / 2
1

3 / 2.0
1.5

3 // 2.0
1.0


Python 3

3 / 2
1.5

3 / 2.0
1.5

3 // 2.0
1.0


Notação Científica

1e+2
100.0

1e-3
0.001



.2.1 Conversões Numéricas

I) Real para inteiro

print int(3.14) 
3

II) Inteiro para Real

print float(7)
7.0

III) Outras bases para decimal

int(string_do_valor_de_outra_base, base)

print int('1000',2)	# "1000" na base 2 (binário)
8

IV) Inteiro para binário

print bin(10)
'0b1010'

V) Inteiro para octalx.real

oct(10)
'012'

VI) Inteiro para hexadecimal

hex(10)
'0xa'

Divisões entre ints e floats

5 / 2 = 2 # Divisão entre Inteiros retorna um inteiro
5 / 2.0 = 2.5 # Resultado mais exato, pois envolve um float pelo menos na operação e retornará um float
