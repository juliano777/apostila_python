Sequências

	Com sequências podemos fazer iteração, indexação, fatiamento (slice) e operações de list comprehension.

Mútável:

lista -> list -> [0, 'string', 7.0, 1000L]

Imutáveis:

string -> str -> 'texto'

tupla -> tuple -> (0, 'string', 7.0, 1000L) # Funciona de forma idêntica à lista, porém, seus itens são imutáveis, consome menos recursos.


Operações com Sequências

- Índices

	Toda sequência, seguindo a mesma idéia de vetores de outras linguagens, como C, por exemplo, começa com o índice 0 (zero).
	Para se obter um índice, fazemos da seguinte forma:

	sequencia[indice]



Segundo elemento da string:

> 'Python'[1]

'y'



Primeiro elemento da lista:

> ['foo', 'bar', 2.7, 80,  2 + 7j][0]

'foo'



Quarto elemento da tupla:

> ('Python', 'C', 'C++', 2.7, 3.7)[3]

2.7



Iteráveis 

	Sequências nos permite também fazer iteração sobre cada elemento.



Definição de uma tupla:

> regiao_sudeste = ('SP', 'MG', 'ES', 'RJ')



Loop sobre a tupla e impressão em tela de cada elemento:

> for i in regiao_sudeste:
    print(i)

SP
MG
ES
RJ



Loop sobre a string e impressão em tela de cada caractere:

> for i in 'Python':
    print(i)

P
y
t
h
o
n



Loop sobre um range de 0 (zero) a 20 (vinte) com a condição de exibir somente 0 (zero) e divisíveis por 5 (cinco):

> for i in range(21):
    if (i % 5 == 0):
        print(i)

0
5
10
15
20



Fatiamento / Slicing 

    É o corte de uma sequência.

    [inicio:fim - 1:incremento]



Fatiamento sem qualquer determinação:

> 'Python Language'[::]

'Python Language'

    Não foram determinados início, fim e incremento.



Fatiamento determinando apenas o início, que é o último elemento:

> 'Python Language'[-1::]

'e'



Pelo sinal de subtração, os três últimos caracteres da string:

> 'Python Language'[-3::]

'age'



Determinando apenas o incremento de 4 (quatro) em 4:

> (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)[::4]

(0, 4, 8)



Incremento negativo faz com que a string seja colocada em ordem reversa:

> 'Python Language'[::-1]

'egaugnaL nohtyP'


A partir do primeiro caractere:

> 'Python Language'[0:]

'Python Language'



Do primeiro ao primeiro caractere:

> 'Python Language'[0:1]

'P'



Do primeiro ao sexto caractere:

> Python Language'[0:6]

'Python'



Do oitavo caractere em diante:

> 'Python Language'[7:]

'Language'



Criação de uma tupla de exemplo:

> linux_distros = (
                 'Debian',
                 'RedHat',
                 'Slackware',
                 'Ubuntu',
                 'CentOS',
                 'SuSE',
                )



Do primeiro ao terceiro elemento:

> linux_distros[0:3]

('Debian', 'RedHat', 'Slackware')



List Comprehension

	Ou em português, "Compreensão de Lista", fornece uma maneira concisa para criar listas.
	Usos comuns são para fazer novas listas onde cada elemento é o resultado de algumas operações aplicadas para cada membro de outra sequência ou iterável, criar uma subsequência desses elementos que satisfaçam uma certa condição.
	Sempre retornará uma lista.



Lista a partir de uma list comprehension do range:

> [i for i in range(21)]

[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]



Lista cujos elementos são a metade de cada elemento do range:

> [i / 2.0 for i in range(10)]

[0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5]



Lista com condição que seja 0 (zero) ou divisível por 5 (cinco):

> [i for i in range(21) if (i % 5 == 0)]

[0, 5, 10, 15, 20]



Tuple Comprehension

    Ou em português "Compreenção de Tupla" é similar a uma list comprehension, no entanto resulta em um generator.



Criação de um generator a partir de uma tuple comprehension:

> x = (i for i in range(21))



Verificando o tipo do objeto:

> type(x)

generator



Dict Comprehension

    Ou também conhecido em português como "Compreenção de Dicionário"



Objeto dicionário a ser criado:

> d1 = {'a': 1, 'b':2, 'c': 3}



Novo dicionário criado a partir de dict comprehension:

> d2 = {k.upper(): v * 10 for k, v in d1.items()}

    Cada chave é o caractere maiúsculo das chave correspondente ao dicionário original e seus valores são multiplicados por 10 (dez).



bla bla bla:

> print(d2)

{'A': 10, 'B': 20, 'C': 30}

