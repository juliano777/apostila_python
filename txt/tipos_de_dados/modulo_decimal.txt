O Módulo decimal

	O módulo decimal fornece suporte para aritmética de ponto flutuante decimal.
	Ele oferece muitas vantagens sobre o tipo float:

- O módulo decimal "é baseado em um modelo de ponto flutuante que foi projetado com pessoas em mente e necessariamente tem um princípio orientador fundamental - computadores devem fornecer uma aritmética que funciona da mesma maneira que a aritmética que as pessoas aprendem na escola" - extraindo da especificação da aritmética decimal.
	Números decimais podem ser representados exatamente. Em contraste, números como 1.1 e 2.2 não têm representações exatas em ponto flutuante binário. Usuários finais não esperam que 1.1 + 2.2 seja exibido como 3.3000000000000003 como é feito como o ponto flutuante binário.
	A exatidão leva à aritmética. Com ponto flutuante decimal, 0.1 + 0.1 + 0.1 - 0.3 é exatamente igual a zero. Com ponto flutuante binário, o resultado é 5.5511151231257827e-017. 
	Enquanto próximo a zero, as diferenças evitam testes de igualdade confiáveis e diferenças podem acumular. Por essa razão, decimal é preferido em aplicações de contabilidade que tem invariações de igualdade rigorosas.
	O módulo decimal incorpora a noção de posições (casas decimais) significantes em que 1.30 + 1.20 é 2.50. O zero no fim é mantido para indicar a significância. Esta é a apresentação habitual para aplicações monetárias. Para multiplicação, a abordagem do "livro de escola" usa todos os números nos multiplicandos. Por exemplo, 1.3 * 1.2 dá 1.56 enquanto que 1.30 * 1.20 dá 1.5600.
	Ao contrário de hardware baseado em ponto flutuante binário, o módulo decimal tem uma precisão alterável (padrão 28 casas decimais).



Importação do módulo:

> import decimal



Criação do objeto Decimal:

> d = decimal.Decimal('0.777')



Exibindo o valor do objeto decimal:

> d

Decimal('0.777')

> print(d)

0.777



bla bla bla:

> 1.1 + 2.2

3.3000000000000003


> 0.1 + 0.1 + 0.1 - 0.3
5.551115123125783e-17



Importando apenas a classe Decimal:

> from decimal import Decimal



erererr:

> Decimal('1.1') + Decimal('2.2')

Decimal('3.3')



Importando a função getcontext:

> from decimal import getcontext



bla bla bla:

> Decimal('1.3') * Decimal('1.2')

Decimal('1.56')

> Decimal('1.30') * Decimal('1.20')

Decimal('1.5600')



bla bla bla:

> getcontext().prec = 3



bla bla bla:

> Decimal('1.30') * Decimal('1.20')

Decimal('1.56')



bla bla bla:

> getcontext().prec = 10

> Decimal('1.3897') * 2

Decimal('2.7794')



bla bla bla:

> getcontext().prec = 3

> Decimal('1.3897') * 2

Decimal('2.78')
