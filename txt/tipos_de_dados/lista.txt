Lista

    Uma lista é uma estrutura de dados similar ao tradicional array que tem em outras linguagens, porém seus elementos podem ser de tipos diferentes.
    Uma lista é também uma coleção de dados mutável, pois sua estrutura pode ser mudada.



Formas de criar uma lista vazia:

> l = []

ou 

> l = list()



Formas de criar uma lista com elementos:

> l = list([1, 2, 3])

ou

> l = [1, 2, 3]



Declaração de uma nova lista:

> x = ['a', 'b', 3, 4.0]



Exibindo o terceiro elemento da lista:

> print(x[2])

3



Alterando o terceiro elemento da lista:

> x[2] = 30



Exibindo o terceiro elemento da lista:

> print(x[2])

30



Exibindo os elementos da lista:

> print(x)

['a', 'b', 30, 4.0]



Existe "7" na lista?:

> 7 in x

False



Existe "3" na lista?:

> 3 in x

True



O método append adiciona um elemento ao final da lista:

> x.append('Uma string qualquer...')



Exibindo os elementos da lista:

> print(x)

['a', 'b', 30, 4.0, 'Uma string qualquer...']



O método extend faz com que os elementos de outra lista sejam adicionadas a uma lista atual:

> foo = ['a', 'b', 'c']  # Definição da primeira lista

> bar = [1, 2]  # Definição da segunda lista

> foo.extend(bar)  # Extendendo a primeira lista com os elementos da segunda

> print(foo)  # Exibindo a lista extendida

['a', 'b', 'c', 1, 2]



O operador "+" sendo utilizado para criar uma nova lista a partir de outra somada à outra:

> y = x + ['abobrinha', '7', {'chave': 'valor'}, ('SP', 'MG', 'PR', 'RO')]



Exibindo a nova lista:

> y

['a',
 'b',
 30,
 4.0,
 'Uma string qualquer...',
 'abobrinha',
 '7',
 {'chave': 'valor'},
 ('SP', 'MG', 'PR', 'RO')]

> x += ['xyz'] # += é um atalho para o método extend

> x

['a', 'b', 30, 4.0, 'Uma string qualquer...', 'xyz']


> foo = [3, 5, 7, 9]

> bar = [11, 13, 15]

> foo.extend(bar)

> foo

[3, 5, 7, 9, 11, 13, 15]

> x.remove('xyz')

> x

['a', 'b', 30, 4.0, 'Uma string qualquer...']

> x.extend(['xyz'])

> x
['a', 'b', 30, 4.0, 'Uma string qualquer...', 'xyz']

x.extend('xyz')

> x

['a', 'b', 30, 4.0, 'Uma string qualquer...', 'xyz', 'x', 'y', 'z']

> x.append('xyz')

> x

['a', 'b', 30, 4.0, 'Uma string qualquer...', 'xyz', 'x', 'y', 'z', 'xyz']

Para listas "+=" -> método extend

> x += 'String'

> x

['a', 'b', 30, 4.0, 'Uma string qualquer...', 'xyz', 'x', 'y', 'z', 'xyz', 'S', 't', 'r', 'i', 'n', 'g']


> x + 'bla bla bla'

Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: can only concatenate list (not "str") to list


> z = list('Hobbit')

> z

['H', 'o', 'b', 'b', 'i', 't']

> z.append('Hobbit')

> z

['H', 'o', 'b', 'b', 'i', 't', 'Hobbit']


> len(z)

7

Tamanho 7, posições variam de 0 a 6:

>  z

['H', 'o', 'b', 'b', 'i', 't', 'Hobbit']

> z.insert(0, 'Gandalf')

> z

['Gandalf', 'H', 'o', 'b', 'b', 'i', 't', 'Hobbit']

> len(z)

ou

> z.__len__()

8

> z.insert(8, 'Bilbo')

> z

['Gandalf', 'H', 'o', 'b', 'b', 'i', 't', 'Hobbit', 'Bilbo']

> z.pop()

'Bilbo'

> z

['Gandalf', 'H', 'o', 'b', 'b', 'i', 't', 'Hobbit']

> livro = ('O %s' % z.pop())

livro
'O Hobbit'

> z

['Gandalf', 'H', 'o', 'b', 'b', 'i', 't']


> z.pop(5)

'i'

> z.sort()

> z

['Gandalf', 'H', 'b', 'b', 'o', 't']

> z.reverse()

> z

['t', 'o', 'b', 'b', 'H', 'Gandalf']

> sorted(z)

['Gandalf', 'H', 'b', 'b', 'o', 't']

> w = sorted(z)

> w

['Gandalf', 'H', 'b', 'b', 'o', 't']

> z

['t', 'o', 'b', 'b', 'H', 'Gandalf']

> reversed(z)

<listreverseiterator object at 0x1653c10>

A função reversed() sempre retorna um iterador.

> z = list(reversed(z))

> z

['Gandalf', 'H', 'b', 'b', 'o', 't']

> sorted('aAcb')

['A', 'a', 'b', 'c']

> list(reversed('aAcb'))

['b', 'c', 'A', 'a']


> x = [1, 2, 3]

> a, b, c = x

> print(a)

1

> print(b)

2

> print(c)

3

> y, z, = x

Traceback (most recent call last):
  File "<input>", line 1, in <module>
ValueError: too many values to unpack (expected 2)

> y, z, _ = x

> print(y)

1

> print(z)

2
