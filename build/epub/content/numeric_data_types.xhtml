<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>6. Tipos Numéricos - int, float e complex</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="tipos-numericos-int-float-e-complex">
<h1>6. Tipos Numéricos - int, float e complex</h1>
<div class="section" id="int">
<h2>6.1. int</h2>
<blockquote>
<div><p>Para representação de todos números inteiros é o tipo int.
A princípio utilizamos para números inteiros o tipo int. O número máximo de int que é aceito pode variar de uma máquina para outra.
Para sabermos qual é o número máximo do tipo int fazemos:</p>
</div></blockquote>
<p>Objeto inteiro:</p>
<p>&gt; i = int(7)</p>
<p>ou</p>
<p>&gt; i = 7</p>
<p>Verificando seu valor;</p>
<p>&gt; i</p>
<p>7</p>
<p>Verificando seu tipo:</p>
<p>&gt; type(i)</p>
<p>int</p>
<p>type(bar)
long</p>
<p>Representação hexadecimal de 178:</p>
<p>&gt; 0xb2</p>
<p>178</p>
<p>Representação octal de 8:</p>
<p>&gt; 0o10</p>
<p>8</p>
<p>Representação binária de 14:</p>
<p>&gt; 0b1110</p>
<p>14</p>
<p>Número 7 (sete) convertido para as bases binária, octal e hexadecimal:</p>
<p>&gt; bin(7)  # binário</p>
<p>‘0b111’</p>
<p>&gt; oct(7)</p>
<p>‘0o7’</p>
<p>&gt; hex(7)</p>
<p>‘0x7’</p>
<p>Descobrir o decimal dada uma base:</p>
<p>&gt; int(‘facada’, base=16)</p>
<p>16435930</p>
<p>&gt; int(‘25’, base=8)</p>
<p>21</p>
<p>&gt; int(‘1111’, base=2)</p>
<p>15</p>
<p>float</p>
<blockquote>
<div><p>Ponto flutuante; não tem precisão absoluta, sua precisão é relativa.
Para uma maior precisão com números que tenham ponto flutuante, utilizar o módulo decimal.</p>
</div></blockquote>
<p>Criação de um float:</p>
<p>&gt; f = float(3)</p>
<p>ou</p>
<p>&gt; f = 3.0</p>
<p>&gt; f  # Veririca o valor</p>
<p>3.0</p>
<p>Formas de se definir um float:</p>
<p>&gt; x = 0.5000000000</p>
<p>ou</p>
<p>&gt; x = 0.5</p>
<p>ou</p>
<p>&gt; x = .5</p>
<p>&gt; x  # Exibe o valor</p>
<p>0.5</p>
<p>&gt; type(x)  # Tipo</p>
<p>float</p>
<p>&gt; x = 2.</p>
<p>&gt; x  # Verifica o valor</p>
<p>2.0</p>
<p>Que tipo resulta de da soma de um inteiro e um float?</p>
<p>&gt; type(7 + 3.0)</p>
<p>float</p>
<p>Resultado:</p>
<p>&gt; 7 + 3.0</p>
<p>10.0</p>
<p>Divisão</p>
<p>&gt; 3 / 2</p>
<p>ou</p>
<p>&gt; 3 / 2.0</p>
<p>ou</p>
<p>&gt; 3.0 / 2</p>
<p>ou</p>
<p>&gt; 3.0 / 2.0</p>
<p>1.5</p>
<p>Divisão Inteira:</p>
<p>&gt; 3 // 2.0</p>
<p>1.0</p>
<p>Notação Científica:</p>
<p>&gt; 1e+2</p>
<p>100.0</p>
<p>&gt; 1e-3</p>
<p>0.001</p>
<p>complex</p>
<blockquote>
<div><p>É o tipo de dados em Python que trata de números complexos, que são muito utilizados em engenharia elétrica.</p>
</div></blockquote>
<p>Número complexo somente com a parte real:</p>
<p>&gt; c = complex(1)</p>
<p>Verificando seu valor e seu tipo:</p>
<p>&gt; c</p>
<p>(1+0j)</p>
<p>&gt; type(c)</p>
<p>complex</p>
<p>Novo valor do número complexo com parte real e imaginária:</p>
<p>&gt; c = complex(5, 3)</p>
<p>&gt; c  # Verificando o valor</p>
<p>(5+3j)</p>
<p>Número complexo somente com a parte imaginária:</p>
<p>&gt; c = complex(0, 3)</p>
<p>&gt; c  # Verificando seu valor</p>
<p>3j</p>
<p>&gt; c.imag  # Extraindo somente a parte imaginária</p>
<p>3.0</p>
<p>&gt; c.real  # Extraindo somente a parte real</p>
<p>0.0</p>
<p>&gt; c + 1  # Somando o número com a parte real</p>
<p>(1+3j)</p>
<p>&gt; c + complex(‘7j’)  # Somando o número com a parte imaginária</p>
<p>10j</p>
<p>&gt; c + complex(2, 17)  # somando o número complexo com outro complexo</p>
<p>(2+20j)</p>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>