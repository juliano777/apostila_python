<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>7. Booleanos</title>
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="booleanos">
<h1>7. Booleanos</h1>
<blockquote>
<div><p>Qualquer objeto pode ser testado como um valor verdadeiro, para uso como condição em um if ou um while ou como um operando de operações “booleanas”. Os seguintes valores são considerados como False:</p>
<blockquote>
<div><p>False, 0, 0L, 0.0, 0j, [], (), {}, set([]), None, “” ou ‘’.</p>
<p>Instâncias de classes definidas por usuários, se a classe define um método __bool__() ou __len__(), quando este método retornar o inteiro zero ou um valor booleano False.
Todos outros valores são considerados verdadeiros, então objetos de muitos tipos são considerados como True.</p>
</div></blockquote>
</div></blockquote>
<p>Definindo a variável como True de forma indireta:</p>
<p>&gt; b = bool(1)</p>
<p>Verificando o valor da variável:</p>
<p>&gt; b</p>
<p>True</p>
<p>Definindo a variável como False de forma indireta:</p>
<p>&gt; b = bool(0)</p>
<p>Verificando o valor da variável:</p>
<p>&gt; b</p>
<p>False</p>
<p>Teste usando a lógica OR:</p>
<p>&gt; True | False</p>
<p>True</p>
<p>Teste usando a lógica AND:</p>
<p>&gt; True &amp; False</p>
<p>False</p>
<p>Negação de True:</p>
<p>&gt; not True</p>
<p>False</p>
<p>Negação de False:</p>
<p>&gt; not False</p>
<p>True</p>
<p>Criação de classes de teste:</p>
<dl class="simple">
<dt>&gt; class Foo(object):</dt><dd><dl class="simple">
<dt>def __len__(self):</dt><dd><p>return 1</p>
</dd>
</dl>
</dd>
<dt>&gt; class Bar(object):</dt><dd><dl class="simple">
<dt>def __len__(self):</dt><dd><p>return 0</p>
</dd>
</dl>
</dd>
</dl>
<p>Criação de objetos:</p>
<p>&gt; foo = Foo()</p>
<p>&gt; bar = Bar()</p>
<p>Verificando o valor booleano dos objetos:</p>
<p>&gt; bool(foo)</p>
<p>True</p>
<p>&gt; bool(bar)</p>
<p>False</p>
<p>True AND (NOT False):</p>
<p>&gt; bool(foo) &amp; (not bool(bar))</p>
<p>True</p>
<p>True AND False:</p>
<p>&gt; bool(foo) &amp; bool(bar)</p>
<p>False</p>
<p>Classe para testar os métodos __bool__ e __len__:</p>
<dl>
<dt>&gt; class Spam(object):</dt><dd><dl class="simple">
<dt>def __bool__(self):</dt><dd><p>return True</p>
</dd>
<dt>def __len__(self):</dt><dd><p>return 0</p>
</dd>
</dl>
<p>O método __bool__ retorna um valor verdadeiro e o método __len__ um falso.
Com ambos declarados na mesma classe, um objeto dela o que retornará?</p>
</dd>
</dl>
<p>Criação de objeto:</p>
<p>&gt; spam = Spam()</p>
<p>Verificando o valor booleano:</p>
<p>&gt; bool(spam)</p>
<p>True</p>
<blockquote>
<div><p>O retorno foi verdadeiro, o método __bool__ prevalece.</p>
</div></blockquote>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>