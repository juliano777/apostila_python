Data e Hora
***********

datetime - Módulo que fornece classes para manipular datas e horas de maneiras simples e complexas. Enquanto data e hora são suportados aritmeticamente, o foco da implementação estã em uma extração eficiente de atributo para saída formatada e manipulação.


Importação de tipo e função para os testes a seguir:

.. code-block:: python

    # 
    from datetime import date

    #
    from datetime import datetime

    # 
    from sys import getsizeof

    # 
    from time import ctime

    #
    from time import sleep

    # 
    from time import time

    # 
    from time import tzname


.. code-block:: python

    # Inserir dados via teclado conforme sugere o modelo na mensagem
    dt_evento = input('Digite a data e hora do evento (AAAA-MM-DD HH:MM): ')

.. code-block:: console

    Digite a data e hora do evento (AAAA-MM-DD HH:MM):

.. code-block:: python

    # Verificando o tipo da variável
    type(dt_evento)

.. code-block:: console

    str

.. code-block:: python

    # Quanto custa essa variável em bytes?
    getsizeof(dt_evento)

.. code-block:: console

    65



    Strings não são adequadas para armazenar data e hora.
    strptime transforma uma string para datetime conforme uma dada máscara:

    strptime: str -> datetime



Converter a string para datetime:

> datetime.strptime(dt_evento, '%Y-%m-%d %H:%M')

datetime.datetime(2018, 12, 21, 12, 15)



O tamanho em bytes do dado em datetime:

> getsizeof(datetime.strptime(dt_evento, '%Y-%m-%d %H:%M'))

48

    A mesma informação armazenada como datetime ocupa menos espaço que string.



Recriar a variável como datetime utilizando seu valor antigo de string:

> dt_evento = datetime.strptime(dt_evento, '%Y-%m-%d %H:%M')



Verificando o tipo:

> type(dt_evento)

datetime.datetime



    Pode ser necessário também fazer o caminho inverso, para transformar um dado datetime para string.
    Para isso pode-se usar strftime:

    strftime: datetime -> str



Extrair como string de um dado datetime:

> datetime.strftime(dt_evento, '%Y-%m-%d %H:%M')

'2018-12-21 12:15'



Variável que contém apenas a data atual:

> hoje = date.today()



Exibindo o valor da variável:

> print(hoje)

2018-12-18



Exibindo apenas partes da data:

> print(hoje.day)  # dia

18

> print(hoje.month)  # mês

12

> print(hoje.year)  # ano

2018



Formato ISO:

> hoje.isoformat()

'2018-12-18'



Método toordinal; retorna a quantidade de dias passados desde 01/01/0001:

> hoje.toordinal()

737046



Método fromordinal; retorna a data a partir da quantidade de dias passados desde 01/01/0001:

> date.fromordinal(737046)

datetime.date(2018, 12, 18)



Que dia será daqui a 40 dias?

> date.fromordinal(hoje.toordinal() + 40)   # formato datetime.date

datetime.date(2019, 1, 27)

> date.fromordinal(hoje.toordinal() + 40).isoformat() # formato ISO

'2019-01-27'



Método weekday (dia da semana), em que segunda-feira = 0 e domingo = 6:

> hoje.weekday()

1



Método isoweekday, em que segunda-feira = 1 e domingo = 7:

> hoje.isoweekday()

2


O Módulo time

    Módulo cujos objetos representam uma hora (local) de dia, independente de qualquer dia em particular, e sujeito a ajustes via um objeto tzinfo.
    Fornece várias funções para manipular valores de hora. Não confundir com a classe time do módulo datetime.



Criação de função que espera n segundos e exibe uma mensagem no final:

> def espera(tempo):
    sleep(tempo)
    print(f'Passaram-se {tempo} segundos')



Execução da função:

> espera(3)

Passaram-se 3 segundos



time.time retorna o tempo atual em segundos desde Epoch (01/01/1970 00:00:00):

> time()

1545143461.209795



Converte um tempo em segundos desde Epoch para uma string, se nenhum parâmetro for passado retorna string do momento atual:

> ctime()

'Tue Dec 18 12:14:49 2018'

> ctime(1540000000)

'Fri Oct 19 22:46:40 2018'
